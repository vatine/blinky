// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlinkyClient is the client API for Blinky service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlinkyClient interface {
	SetLEDs(ctx context.Context, in *SetLEDRequest, opts ...grpc.CallOption) (*SetLEDResponse, error)
	GetLEDs(ctx context.Context, in *GetLEDRequest, opts ...grpc.CallOption) (*GetLEDResponse, error)
}

type blinkyClient struct {
	cc grpc.ClientConnInterface
}

func NewBlinkyClient(cc grpc.ClientConnInterface) BlinkyClient {
	return &blinkyClient{cc}
}

func (c *blinkyClient) SetLEDs(ctx context.Context, in *SetLEDRequest, opts ...grpc.CallOption) (*SetLEDResponse, error) {
	out := new(SetLEDResponse)
	err := c.cc.Invoke(ctx, "/blinky.Blinky/SetLEDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blinkyClient) GetLEDs(ctx context.Context, in *GetLEDRequest, opts ...grpc.CallOption) (*GetLEDResponse, error) {
	out := new(GetLEDResponse)
	err := c.cc.Invoke(ctx, "/blinky.Blinky/GetLEDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlinkyServer is the server API for Blinky service.
// All implementations must embed UnimplementedBlinkyServer
// for forward compatibility
type BlinkyServer interface {
	SetLEDs(context.Context, *SetLEDRequest) (*SetLEDResponse, error)
	GetLEDs(context.Context, *GetLEDRequest) (*GetLEDResponse, error)
	mustEmbedUnimplementedBlinkyServer()
}

// UnimplementedBlinkyServer must be embedded to have forward compatible implementations.
type UnimplementedBlinkyServer struct {
}

func (UnimplementedBlinkyServer) SetLEDs(context.Context, *SetLEDRequest) (*SetLEDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLEDs not implemented")
}
func (UnimplementedBlinkyServer) GetLEDs(context.Context, *GetLEDRequest) (*GetLEDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLEDs not implemented")
}
func (UnimplementedBlinkyServer) mustEmbedUnimplementedBlinkyServer() {}

// UnsafeBlinkyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlinkyServer will
// result in compilation errors.
type UnsafeBlinkyServer interface {
	mustEmbedUnimplementedBlinkyServer()
}

func RegisterBlinkyServer(s grpc.ServiceRegistrar, srv BlinkyServer) {
	s.RegisterService(&Blinky_ServiceDesc, srv)
}

func _Blinky_SetLEDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLEDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlinkyServer).SetLEDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blinky.Blinky/SetLEDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlinkyServer).SetLEDs(ctx, req.(*SetLEDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blinky_GetLEDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLEDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlinkyServer).GetLEDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blinky.Blinky/GetLEDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlinkyServer).GetLEDs(ctx, req.(*GetLEDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Blinky_ServiceDesc is the grpc.ServiceDesc for Blinky service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blinky_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blinky.Blinky",
	HandlerType: (*BlinkyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLEDs",
			Handler:    _Blinky_SetLEDs_Handler,
		},
		{
			MethodName: "GetLEDs",
			Handler:    _Blinky_GetLEDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blinky.proto",
}
