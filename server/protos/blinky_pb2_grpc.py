# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import blinky_pb2 as blinky__pb2


class BlinkyStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SetLEDs = channel.unary_unary(
        '/blinky.Blinky/SetLEDs',
        request_serializer=blinky__pb2.SetLEDRequest.SerializeToString,
        response_deserializer=blinky__pb2.SetLEDResponse.FromString,
        )
    self.GetLEDs = channel.unary_unary(
        '/blinky.Blinky/GetLEDs',
        request_serializer=blinky__pb2.GetLEDRequest.SerializeToString,
        response_deserializer=blinky__pb2.GetLEDResponse.FromString,
        )


class BlinkyServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def SetLEDs(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLEDs(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BlinkyServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SetLEDs': grpc.unary_unary_rpc_method_handler(
          servicer.SetLEDs,
          request_deserializer=blinky__pb2.SetLEDRequest.FromString,
          response_serializer=blinky__pb2.SetLEDResponse.SerializeToString,
      ),
      'GetLEDs': grpc.unary_unary_rpc_method_handler(
          servicer.GetLEDs,
          request_deserializer=blinky__pb2.GetLEDRequest.FromString,
          response_serializer=blinky__pb2.GetLEDResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'blinky.Blinky', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
